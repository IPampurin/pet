/*
				Многопоточный счётчик.

Данная программа является примером решения следующей задачи:

	Имеется горутина, которая генерирует числа и отправляет их в канал. Дальше несколько горутин читают и раскидывают их по нескольким каналам.
	В конце происходит обратный процесс: все числа из каналов пишутся в один результирующий канал.
	Нужно, чтобы количество и сумма входящих чисел совпала с количеством и суммой чисел, которые получены из канала вывода.

*/

package main

import (
	"context"
	"sync/atomic"
	"time"
)

func main() {

	// создадим контекст с отменой через секунду
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	// chIn канал, в который генератор пишет числа
	chIn := make(chan int)

	var inputSum int   // сумма сгенерированных чисел
	var inputCount int // количество сгенерированных чисел

	generator(ctx, chIn, func(i int) {
		atomic.AddInt64(&inputSum, int64(i))
		atomic.AddInt64(&inputCount, 1)
	})
}
